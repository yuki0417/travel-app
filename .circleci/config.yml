# circleCIのバージョン指定
version: 2
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
# Djangoのテストを実行
      - checkout
      - run:
          name: docker-compose up
          command: |
            docker-compose -f docker-compose_ci.yml up -d
      - run:
          name: docker-compose install chromium and driver
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "apt-get -y update
            && apt-get install -y chromium chromium-driver"
      - run:
          name: docker-compose install requirements
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "pip install --no-cache-dir -r requirements_dev.txt"
      - run:
          name: docker-compose exec migrate
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "cd travel && python manage.py migrate
            --settings=setting.settings_ci"
      - run:
          name: docker-compose exec unittest
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "cd travel
            && coverage run --source='.'
            --rcfile='test/setting/.coveragerc'
            manage.py test test.unittest
            --settings=setting.settings_ci --keepdb
            && mv test-reports/test.xml test-reports/unittest/unittest.xml"
      - run:
          name: docker-compose exec integration test
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "cd travel
            && python manage.py test test.integtest.accounts
            --settings=setting.settings_ci --keepdb
            && mv test-reports/test.xml test-reports/integtest/accounts.xml
            && python manage.py test test.integtest.travel.test_place_list
            --settings=setting.settings_ci --keepdb
            && mv test-reports/test.xml test-reports/integtest/travel_place_list.xml
            && python manage.py test test.integtest.travel.test_saved_place_list
            --settings=setting.settings_ci --keepdb
            && mv test-reports/test.xml test-reports/integtest/travel_saved_place_list.xml
            && python manage.py test test.integtest.travel.test_setting
            --settings=setting.settings_ci --keepdb
            && mv test-reports/test.xml test-reports/integtest/travel_setting.xml"
      - run:
          name: docker-compose generate test-html-report
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "cd travel
            && junit2html test-reports/unittest/unittest.xml
            test-reports/unittest/html/unittest.html
            && junit2html test-reports/integtest/accounts.xml
            test-reports/integtest/html/accounts.html
            && junit2html test-reports/integtest/travel_place_list.xml
            test-reports/integtest/html/travel_place_list.html
            && junit2html test-reports/integtest/travel_saved_place_list.xml
            test-reports/integtest/html/travel_saved_place_list.html
            && junit2html test-reports/integtest/travel_setting.xml
            test-reports/integtest/html/travel_setting.html"
      - run:
          name: docker-compose generate coverage-html-report
          command: >
            docker-compose -f docker-compose_ci.yml exec django sh -c
            "cd travel && coverage html -d test-reports/coverage/"
      - run:
          name: docker-compose down
          command: docker-compose -f docker-compose_ci.yml down

      - store_test_results:
          path: ./travel/test-reports

      - store_artifacts:
          path: ./travel/test-reports
# EC2にSSH接続し、デプロイを実行
  # deploy:
  #   machine:
  #     image: circleci/classic:edge
  #   steps:
  #     - checkout
  #     # CircleCIに登録した秘密鍵を呼び出す
  #     - add_ssh_keys:
  #     - run: ssh ${USER_NAME}@${HOST_NAME} 'cd todoList && git pull && docker-compose run python ./manage.py migrate'

# テストが成功した場合のみ、deployを実行するようにする
# workflows:
#   version: 2
#   build_and_deploy:
#     jobs:
#       - build
#       - deploy:
#           requires:
#             - build
#           # masterブランチがpushされた場合のみdeployするようにする
#           filters:
#             branches:
#               only: master
