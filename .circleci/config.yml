version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  codecov: codecov/codecov@1.0.2

executors:
  default:
    machine:
      image: 'circleci/classic:edge'

jobs:
  build:
    executor: default
    environment:
      DOCKER_COMPOSE: docker-compose -f docker-compose_ci.yml
      SETTINGS_CI: --settings=setting.settings_ci
      TEST_SETTINGS: --settings=setting.settings_ci --keepdb
      TEST_XML: test-reports/test.xml
      REPORTS_DIR: test-reports
      REPORTS_INTEG_DIR: test-reports/integtest
      REPORTS_UNIT_DIR: test-reports/unittest
      REPORTS_COVERAGE_DIR: test-reports/coverage
      REPORTS_COVERAGE_XML: test-reports/coverage/xml/coverage.xml
      MNG_PY: python manage.py
# アプリのビルド、テスト実行
    steps:
      - checkout
      - run:
          name: docker-compose up
          command: |
            $DOCKER_COMPOSE up -d
      - run:
          name: docker-compose install chromium and driver
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "apk update
            && apk add chromium chromium-chromedriver"
      - run:
          name: docker-compose install requirements
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "pip install --no-cache-dir -r requirements_dev.txt"
      - run:
          name: docker-compose exec migrate
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel && $MNG_PY migrate $SETTINGS_CI"
      - run:
          name: docker-compose exec unittest
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel
            && coverage run --source='.'
            --rcfile='test/setting/.coveragerc'
            manage.py test test.unittest $TEST_SETTINGS
            && mv $TEST_XML $REPORTS_UNIT_DIR/unittest.xml"
      - run:
          name: docker-compose exec integration test
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel
            && $MNG_PY test test.integtest.accounts
            $TEST_SETTINGS
            && mv $TEST_XML $REPORTS_INTEG_DIR/accounts.xml
            && $MNG_PY test test.integtest.travel.test_place_list
            $TEST_SETTINGS
            && mv $TEST_XML $REPORTS_INTEG_DIR/travel_place_list.xml
            && $MNG_PY test test.integtest.travel.test_saved_place_list
            $TEST_SETTINGS
            && mv $TEST_XML $REPORTS_INTEG_DIR/travel_saved_place_list.xml
            && $MNG_PY test test.integtest.travel.test_setting
            $TEST_SETTINGS
            && mv $TEST_XML $REPORTS_INTEG_DIR/travel_setting.xml"
      - run:
          name: docker-compose generate test-html-report
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel
            && junit2html $REPORTS_UNIT_DIR/unittest.xml
            $REPORTS_UNIT_DIR/html/unittest.html
            && junit2html $REPORTS_INTEG_DIR/accounts.xml
            $REPORTS_INTEG_DIR/html/accounts.html
            && junit2html $REPORTS_INTEG_DIR/travel_place_list.xml
            $REPORTS_INTEG_DIR/html/travel_place_list.html
            && junit2html $REPORTS_INTEG_DIR/travel_saved_place_list.xml
            $REPORTS_INTEG_DIR/html/travel_saved_place_list.html
            && junit2html $REPORTS_INTEG_DIR/travel_setting.xml
            $REPORTS_INTEG_DIR/html/travel_setting.html"
      - run:
          name: docker-compose generate coverage-xml-report
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel && coverage xml -o $REPORTS_COVERAGE_XML"
      - run:
          name: docker-compose generate coverage-html-report
          command: >
            $DOCKER_COMPOSE exec django sh -c
            "cd travel && coverage html -d $REPORTS_COVERAGE_DIR/html"
      - run:
          name: docker-compose down
          command: $DOCKER_COMPOSE down

      - codecov/upload:
          file: ./travel/test-reports/coverage/xml/coverage.xml

      - store_test_results:
          path: ./travel/test-reports

      - store_artifacts:
          path: ./travel/test-reports

  deploy:
    executor: default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cb:4c:1c:96:4e:34:b4:6d:06:d2:6f:eb:86:ee:59:2f"
      - run:
          name: bring env file
          command: >
            echo "HostName github.com" >> ~/.ssh/config
            && echo "StrictHostKeyChecking no" >> ~/.ssh/config
            && pushd ../
            && git clone git@github.com-a:yuki0417/aws_setting.git
            && cp aws_setting/.env project/travel/.env
            && popd
      # Djangoイメージのプッシュ
      - aws-ecr/build-and-push-image:
          dockerfile: Dockerfile_django
          account-url: AWS_ECR_ACCOUNT_URL
          repo: "${AWS_RESOURCE_NAME_PREFIX_DJANGO}"
          region: AWS_DEFAULT_REGION
          tag: "${CIRCLE_SHA1}"
      # Nginxイメージのプッシュ
      - aws-ecr/build-and-push-image:
          dockerfile: Dockerfile_nginx
          account-url: AWS_ECR_ACCOUNT_URL
          repo: "${AWS_RESOURCE_NAME_PREFIX_NGINX}"
          region: AWS_DEFAULT_REGION
          tag: "${CIRCLE_SHA1}"
      # ECSのタスク実行
      - run:
          name: setup ecs-cli
          command: >
            sudo curl -o /usr/local/bin/ecs-cli
            https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
            && sudo chmod +x /usr/local/bin/ecs-cli
      - run:
          name: ECS compose create
          command: >
            ecs-cli compose
            --project-name travel-app
            --file docker-compose.yml
            --ecs-params ecs-params.yml create
            --launch-type FARGATE
            --cluster travel-app-cluster
      - run:
          name: ECS compose service up
          command: >
            ecs-cli compose
            --project-name travel-app
            --file docker-compose.yml service up
            --launch-type FARGATE
            --cluster travel-app-cluster
            --region ap-northeast-1
            --target-group-arn "arn:aws:elasticloadbalancing:ap-northeast-1:${AWS_ACCOUNT_ID}:targetgroup/travel-app-target-group/14a59760ea30aac8"
            --container-name nginx --container-port 80

# EC2にSSH接続し、検証環境にデプロイを実行
  staging-deploy:
    executor: default
    environment:
      SSH_OPTIONS: -o StrictHostKeyChecking=no
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8f:d7:82:ae:32:24:b9:90:34:78:46:35:c1:bb:66:2d"
      - run:
          name: pass the private key pairs of github deploy (public) keys
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            "echo -e $AWS_SETTING_PRIVATE_KEY > ~/.ssh/aws_setting_repo
            && echo -e $TRAVEL_APP_PRIVATE_KEY > ~/.ssh/travel_app_repo"
      - run:
          name: install git
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'sudo yum reinstall glibc-common -y
            && sudo yum update -y
            && sudo yum install git -y'
      - run:
          name: set up git ssh environment
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'echo -e "Host github-aws-setting\n
             User git\n  Port 22\n  HostName github.com\n
             IdentityFile ~/.ssh/aws_setting_repo\n
             TCPKeepAlive yes\n  IdentitiesOnly yes\n
             StrictHostKeyChecking no\n\nHost github-travel-app\n
             User git\n  Port 22\n  HostName github.com\n
             IdentityFile ~/.ssh/travel_app_repo\n  TCPKeepAlive yes\n
             IdentitiesOnly yes\n  StrictHostKeyChecking no" > ~/.ssh/config'
      - run:
          name: chmod 600 to the keys
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'cd ~/.ssh
            && chmod 600 config aws_setting_repo travel_app_repo'
      - run:
          name: git clone sources
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'cd ~
            && rm -rf aws_setting travel-app
            && git clone git@github-aws-setting:yuki0417/aws_setting.git
            && git clone git@github-travel-app:yuki0417/travel-app.git
            && cd travel-app
            && git checkout -b testing origin/testing'
      - run:
          name: set up deploy environment
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'cd ~/aws_setting
            && sudo sh ec2_setup.sh'
      - run:
          name: deploy to testing environment
          command: >
            ssh ${USER_NAME}@${HOST_NAME} $SSH_OPTIONS
            'cd ~/aws_setting
            && sudo sh ec2_env_set.sh
            && cd ~/travel-app
            && docker rm -f $(docker ps -aq) || true
            && docker rmi -f `docker images -q` || true
            && docker system prune -f
            && docker-compose -f docker-compose_stg.yml up -d'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - staging-deploy:
          requires:
            - build
          filters:
            branches:
              only: staging
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
